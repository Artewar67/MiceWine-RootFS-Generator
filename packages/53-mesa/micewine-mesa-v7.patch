diff --git a/bin/install_megadrivers.py b/bin/install_megadrivers.py
index 60ee4576c60..71e2a07e70c 100644
--- a/bin/install_megadrivers.py
+++ b/bin/install_megadrivers.py
@@ -24,7 +24,16 @@
 
 import argparse
 import os
+import shutil
 
+def link(src, dest):
+    shutil.copyfile(src, dest)
+
+def unlink(src):
+    os.remove(src)
+
+os.link = link
+os.unlink = unlink
 
 def main():
     parser = argparse.ArgumentParser()
diff --git a/include/vulkan/vk_android_native_buffer.h b/include/vulkan/vk_android_native_buffer.h
index 80e5d26c8ee..cf17acd99db 100644
--- a/include/vulkan/vk_android_native_buffer.h
+++ b/include/vulkan/vk_android_native_buffer.h
@@ -1,5 +1,5 @@
 /* MESA: A hack to avoid #ifdefs in driver code. */
-#ifdef __ANDROID__
+#if 0 //defined(__ANDROID__) || !defined(__MICEWINE__)
 
 #include <cutils/native_handle.h>
 #if ANDROID_API_LEVEL < 28
diff --git a/meson.build b/meson.build
index ae0daeeebeb..c977c6240df 100644
--- a/meson.build
+++ b/meson.build
@@ -1393,7 +1393,7 @@ if not ['linux'].contains(host_machine.system())
   endif
 endif
 
-foreach h : ['xlocale.h', 'linux/futex.h', 'endian.h', 'dlfcn.h', 'sys/shm.h',
+foreach h : ['linux/futex.h', 'endian.h', 'dlfcn.h', 'sys/shm.h',
              'cet.h', 'pthread_np.h', 'sys/inotify.h', 'linux/udmabuf.h']
   if cc.check_header(h)
     pre_args += '-DHAVE_@0@'.format(h.to_upper().underscorify())
@@ -1403,11 +1403,9 @@ endforeach
 functions_to_detect = {
   'strtof': '',
   'mkostemp': '',
-  'memfd_create': '',
   'random_r': '',
   'flock': '',
   'strtok_r': '',
-  'getrandom': '',
   'qsort_s': '',
   'posix_fallocate': '',
   'secure_getenv': '',
diff --git a/src/freedreno/vulkan/tu_device.cc b/src/freedreno/vulkan/tu_device.cc
index 3ffb0d36f49..df8152170d8 100644
--- a/src/freedreno/vulkan/tu_device.cc
+++ b/src/freedreno/vulkan/tu_device.cc
@@ -2815,6 +2815,14 @@ tu_AllocateMemory(VkDevice _device,
       uint64_t client_address = 0;
       BITMASK_ENUM(tu_bo_alloc_flags) alloc_flags = TU_BO_ALLOC_NO_FLAGS;
 
+      const VkExportMemoryAllocateInfo *export_info = vk_find_struct_const(
+         pAllocateInfo->pNext, EXPORT_MEMORY_ALLOCATE_INFO);
+      if (export_info && (export_info->handleTypes &
+                          (VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT |
+                           VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT))) {
+         alloc_flags |= TU_BO_ALLOC_SHAREABLE;
+      }
+
       const VkMemoryOpaqueCaptureAddressAllocateInfo *replay_info =
          vk_find_struct_const(pAllocateInfo->pNext,
                               MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO);
diff --git a/src/freedreno/vulkan/tu_knl.h b/src/freedreno/vulkan/tu_knl.h
index bf3317ae024..f4fc58c85fb 100644
--- a/src/freedreno/vulkan/tu_knl.h
+++ b/src/freedreno/vulkan/tu_knl.h
@@ -21,6 +21,7 @@ enum tu_bo_alloc_flags {
    TU_BO_ALLOC_GPU_READ_ONLY = 1 << 1,
    TU_BO_ALLOC_REPLAYABLE = 1 << 2,
    TU_BO_ALLOC_INTERNAL_RESOURCE = 1 << 3,
+   TU_BO_ALLOC_SHAREABLE = 1 << 3,
    TU_BO_ALLOC_DMABUF = 1 << 4,
 };
 
@@ -54,6 +55,7 @@ struct tu_bo {
    uint32_t bo_list_idx;
 
    bool implicit_sync : 1;
+   int dmabuf_fd;
 };
 
 struct tu_knl {
diff --git a/src/freedreno/vulkan/tu_knl_kgsl.cc b/src/freedreno/vulkan/tu_knl_kgsl.cc
index 055078106e4..eebf52401bf 100644
--- a/src/freedreno/vulkan/tu_knl_kgsl.cc
+++ b/src/freedreno/vulkan/tu_knl_kgsl.cc
@@ -11,6 +11,7 @@
 #include <stdint.h>
 #include <sys/ioctl.h>
 #include <sys/mman.h>
+#include <linux/dma-heap.h>
 
 #include "msm_kgsl.h"
 #include "vk_util.h"
@@ -18,6 +19,7 @@
 #include "util/u_debug.h"
 #include "util/u_vector.h"
 #include "util/libsync.h"
+#include "util/os_file.h"
 #include "util/timespec.h"
 
 #include "tu_cmd_buffer.h"
@@ -68,6 +70,57 @@ kgsl_submitqueue_close(struct tu_device *dev, uint32_t queue_id)
    safe_ioctl(dev->physical_device->local_fd, IOCTL_KGSL_DRAWCTXT_DESTROY, &req);
 }
 
+static int
+dmabuf_alloc(uint64_t size)
+{
+   int ret;
+   int dma_heap = open("/dev/dma_heap/system", O_RDONLY);
+
+   if (dma_heap < 0) {
+      int ion_heap = open("/dev/ion", O_RDONLY);
+
+      if (ion_heap < 0)
+         return -1;
+
+      struct ion_allocation_data {
+         __u64 len;
+         __u32 heap_id_mask;
+         __u32 flags;
+         __u32 fd;
+         __u32 unused;
+      } alloc_data = {
+         .len = size,
+         /* ION_HEAP_SYSTEM | ION_SYSTEM_HEAP_ID */
+         .heap_id_mask = (1U << 0) | (1U << 25),
+         .flags = 0, /* uncached */
+      };
+
+      ret = safe_ioctl(ion_heap, _IOWR('I', 0, struct ion_allocation_data),
+                      &alloc_data);
+
+      close(ion_heap);
+
+      if (ret)
+         return -1;
+
+      return alloc_data.fd;
+   } else {
+      struct dma_heap_allocation_data alloc_data = {
+         .len = size,
+         .fd_flags = O_RDWR | O_CLOEXEC,
+      };
+
+      ret = safe_ioctl(dma_heap, DMA_HEAP_IOCTL_ALLOC, &alloc_data);
+
+      close(dma_heap);
+
+      if (ret)
+         return -1;
+
+      return alloc_data.fd;
+   }
+}
+
 static VkResult
 kgsl_bo_init(struct tu_device *dev,
              struct tu_bo **out_bo,
@@ -79,6 +132,21 @@ kgsl_bo_init(struct tu_device *dev,
 {
    assert(client_iova == 0);
 
+   if (flags & TU_BO_ALLOC_SHAREABLE) {
+      int fd = dmabuf_alloc(size);
+
+      if (fd < 0) {
+         return vk_errorf(dev, VK_ERROR_OUT_OF_DEVICE_MEMORY,
+                       "DMABUF_ALLOC failed (%s)", strerror(errno));
+      }
+
+      VkResult res = tu_bo_init_dmabuf(dev, out_bo, size, fd);
+
+      close(fd);
+
+      return res;
+   }
+
    struct kgsl_gpumem_alloc_id req = {
       .size = size,
    };
@@ -114,6 +182,7 @@ kgsl_bo_init(struct tu_device *dev,
       .iova = req.gpuaddr,
       .name = tu_debug_bos_add(dev, req.mmapsize, name),
       .refcnt = 1,
+      .dmabuf_fd = -1,
    };
 
    *out_bo = bo;
@@ -169,6 +238,7 @@ kgsl_bo_init_dmabuf(struct tu_device *dev,
       .iova = info_req.gpuaddr,
       .name = tu_debug_bos_add(dev, info_req.size, "dmabuf"),
       .refcnt = 1,
+      .dmabuf_fd = os_dupfd_cloexec(fd),
    };
 
    *out_bo = bo;
@@ -179,14 +249,21 @@ kgsl_bo_init_dmabuf(struct tu_device *dev,
 static int
 kgsl_bo_export_dmabuf(struct tu_device *dev, struct tu_bo *bo)
 {
-   tu_stub();
-
-   return -1;
+   return os_dupfd_cloexec(bo->dmabuf_fd);
 }
 
 static VkResult
 kgsl_bo_map(struct tu_device *dev, struct tu_bo *bo, void *placed_addr)
 {
+   if (bo->dmabuf_fd != -1) {
+      void *map = mmap(0, bo->size, PROT_READ | PROT_WRITE, MAP_SHARED, bo->dmabuf_fd, 0);
+
+      if (map != MAP_FAILED) {
+         bo->map = map;
+         return VK_SUCCESS;
+      }
+   }
+
    uint64_t offset = bo->gem_handle << 12;
    void *map = mmap(placed_addr, bo->size, PROT_READ | PROT_WRITE,
                     MAP_SHARED | (placed_addr != NULL ? MAP_FIXED : 0),
@@ -220,6 +297,9 @@ kgsl_bo_finish(struct tu_device *dev, struct tu_bo *bo)
 
    TU_RMV(bo_destroy, dev, bo);
 
+   if (bo->dmabuf_fd != -1)
+      close(bo->dmabuf_fd);
+
    struct kgsl_gpumem_free_id req = {
       .id = bo->gem_handle
    };
diff --git a/src/util/detect_os.h b/src/util/detect_os.h
index 86286dfbe70..49195b3398c 100644
--- a/src/util/detect_os.h
+++ b/src/util/detect_os.h
@@ -25,7 +25,7 @@
  * also be defined.
  */
 #if defined(__ANDROID__)
-#define DETECT_OS_ANDROID 1
+#define DETECT_OS_ANDROID 0
 #endif
 
 #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
diff --git a/src/virtio/vtest/vtest_protocol.h b/src/virtio/vtest/vtest_protocol.h
index c48be146ec5..351b312d737 100644
--- a/src/virtio/vtest/vtest_protocol.h
+++ b/src/virtio/vtest/vtest_protocol.h
@@ -25,7 +25,7 @@
 #ifndef VTEST_PROTOCOL
 #define VTEST_PROTOCOL
 
-#define VTEST_DEFAULT_SOCKET_NAME "/tmp/.virgl_test"
+#define VTEST_DEFAULT_SOCKET_NAME "/data/data/com.termux/files/usr/tmp/.virgl_test"
 
 #ifdef VIRGL_RENDERER_UNSTABLE_APIS
 #define VTEST_PROTOCOL_VERSION 3
diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index 3dc4a670cd7..30848b9f1e0 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -175,6 +175,12 @@ struct wsi_display_sync {
 
 static uint64_t fence_sequence;
 
+#ifdef __ANDROID__
+static void thread_signal_handler (int signum) {
+   pthread_exit (0);
+}
+#endif
+
 ICD_DEFINE_NONDISP_HANDLE_CASTS(wsi_display_mode, VkDisplayModeKHR)
 ICD_DEFINE_NONDISP_HANDLE_CASTS(wsi_display_connector, VkDisplayKHR)
 
@@ -1340,7 +1346,9 @@ wsi_display_wait_thread(void *data)
       .events = POLLIN
    };
 
+#ifndef __ANDROID__
    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+#endif
    for (;;) {
       int ret = poll(&pollfd, 1, -1);
       if (ret > 0) {
@@ -1368,9 +1376,22 @@ wsi_display_start_wait_thread(struct wsi_display *wsi)
 static void
 wsi_display_stop_wait_thread(struct wsi_display *wsi)
 {
+#ifdef __ANDROID__
+   struct sigaction actions;
+   memset (&actions, 0, sizeof (actions));
+   sigemptyset (&actions.sa_mask);
+   actions.sa_flags = 0;
+   actions.sa_handler = thread_signal_handler;
+   sigaction (SIGUSR2, &actions, NULL);
+#endif
+
    pthread_mutex_lock(&wsi->wait_mutex);
    if (wsi->wait_thread) {
+#ifndef __ANDROID__
       pthread_cancel(wsi->wait_thread);
+#else
+      pthread_kill(wsi->wait_thread, SIGUSR2);
+#endif
       pthread_join(wsi->wait_thread, NULL);
       wsi->wait_thread = 0;
    }
@@ -2214,7 +2235,9 @@ udev_event_listener_thread(void *data)
 
    int udev_fd = udev_monitor_get_fd(mon);
 
+#ifndef __ANDROID__
    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+#endif
 
    for (;;) {
       nfds_t nfds = 1;
@@ -2337,6 +2360,15 @@ wsi_display_finish_wsi(struct wsi_device *wsi_device,
    struct wsi_display *wsi =
       (struct wsi_display *) wsi_device->wsi[VK_ICD_WSI_PLATFORM_DISPLAY];
 
+#ifdef __ANDROID__
+   struct sigaction actions;
+   memset (&actions, 0, sizeof (actions));
+   sigemptyset (&actions.sa_mask);
+   actions.sa_flags = 0;
+   actions.sa_handler = thread_signal_handler;
+   sigaction (SIGUSR2, &actions, NULL);
+#endif
+
    if (wsi) {
       wsi_for_each_connector(connector, wsi) {
          wsi_for_each_display_mode(mode, connector) {
@@ -2348,7 +2380,11 @@ wsi_display_finish_wsi(struct wsi_device *wsi_device,
       wsi_display_stop_wait_thread(wsi);
 
       if (wsi->hotplug_thread) {
+#ifndef __ANDROID__
          pthread_cancel(wsi->hotplug_thread);
+#else
+         pthread_kill(wsi->hotplug_thread, SIGUSR2);
+#endif
          pthread_join(wsi->hotplug_thread, NULL);
       }
 
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index c6afea8b958..c5d6f5821af 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -447,7 +447,7 @@ wsi_x11_get_connection(struct wsi_device *wsi_dev,
 
 static const VkFormat formats[] = {
    VK_FORMAT_R5G6B5_UNORM_PACK16,
-   VK_FORMAT_B8G8R8A8_SRGB,
+   // VK_FORMAT_B8G8R8A8_SRGB,
    VK_FORMAT_B8G8R8A8_UNORM,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32,
 };
@@ -1395,7 +1395,7 @@ x11_present_to_x11_dri3(struct x11_swapchain *chain, uint32_t image_index,
       options |= XCB_PRESENT_OPTION_SUBOPTIMAL;
 #endif
 
-   xshmfence_reset(image->shm_fence);
+   // xshmfence_reset(image->shm_fence);
 
    if (!chain->base.image_info.explicit_sync) {
       ++chain->sent_image_count;
@@ -2115,14 +2115,23 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
          return VK_ERROR_OUT_OF_HOST_MEMORY;
 
       cookie =
-         xcb_dri3_pixmap_from_buffer_checked(chain->conn,
+         xcb_dri3_pixmap_from_buffers_checked(chain->conn,
                                              image->pixmap,
                                              chain->window,
-                                             image->base.sizes[0],
+                                             image->base.num_planes,
                                              pCreateInfo->imageExtent.width,
                                              pCreateInfo->imageExtent.height,
                                              image->base.row_pitches[0],
-                                             chain->depth, bpp, fd);
+                                             image->base.offsets[0],
+                                             0,
+                                             0,
+                                             0,
+                                             0,
+                                             0,
+                                             0,
+                                             chain->depth, bpp,
+                                             1274,
+                                             &fd);
    }
 
    error = xcb_request_check(chain->conn, cookie);
@@ -2152,6 +2161,9 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
    }
 #endif
 
+   image->sync_fence = 0;
+   return VK_SUCCESS;
+
 out_fence:
    fence_fd = xshmfence_alloc_shm();
    if (fence_fd < 0)
@@ -2193,9 +2205,9 @@ x11_image_finish(struct x11_swapchain *chain,
    xcb_void_cookie_t cookie;
 
    if (!chain->base.wsi->sw || chain->has_mit_shm) {
-      cookie = xcb_sync_destroy_fence(chain->conn, image->sync_fence);
-      xcb_discard_reply(chain->conn, cookie.sequence);
-      xshmfence_unmap_shm(image->shm_fence);
+      // cookie = xcb_sync_destroy_fence(chain->conn, image->sync_fence);
+      // xcb_discard_reply(chain->conn, cookie.sequence);
+      // xshmfence_unmap_shm(image->shm_fence);
 
       cookie = xcb_free_pixmap(chain->conn, image->pixmap);
       xcb_discard_reply(chain->conn, cookie.sequence);
